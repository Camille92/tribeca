import request = require('request');
import http = require('http');

// Taken with the below modifications from https://github.com/BitMEX/api-connectors/blob/master/clients/typescript-node/api.ts
import promise = require('q');
type date = string;
type Promise<T> = Q.Promise<T>;
type inline_response_200 = any;
// End modifications

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

export class AnonymousModel0 {
    apns: any;
    gcm: any;
}

export class AnonymousModel5 {
    /**
    * See the API docs for the list of supported values.
    */
    scheme: string;
    /**
    * Scheme-specific credentials
    */
    credential: any;
}

export class UserPreferences {
    announcementsLastSeen: date;
    colorTheme: string;
    currency: string;
    debug: boolean;
    disableEmails: Array<string>;
    hideConfirmDialogs: Array<string>;
    hideNotifications: Array<string>;
    hidePhoneConfirm: boolean;
    msgsSeen: Array<string>;
    orderBookBinning: number;
    orderControlsPlusMinus: boolean;
    sounds: Array<string>;
    strictIPCheck: boolean;
    tickerGroup: string;
    tickerPinned: boolean;
    tradeLayout: string;
}

export class AccessToken {
    id: string;
    /**
    * time to live in seconds (2 weeks by default)
    */
    ttl: number;
    created: date;
    userId: number;
}

export class Margin {
    account: number;
    currency: string;
    riskLimit: number;
    prevState: string;
    state: string;
    action: string;
    amount: number;
    pendingCredit: number;
    pendingDebit: number;
    prevRealisedPnl: number;
    prevUnrealisedPnl: number;
    grossComm: number;
    grossOpenCost: number;
    grossOpenPremium: number;
    grossExecCost: number;
    grossMarkValue: number;
    riskValue: number;
    taxableMargin: number;
    initMargin: number;
    maintMargin: number;
    sessionMargin: number;
    targetExcessMargin: number;
    varMargin: number;
    realisedPnl: number;
    unrealisedPnl: number;
    indicativeTax: number;
    unrealisedProfit: number;
    walletBalance: number;
    marginBalance: number;
    marginBalancePcnt: number;
    marginLeverage: number;
    marginUsedPcnt: number;
    excessMargin: number;
    excessMarginPcnt: number;
    availableMargin: number;
    withdrawableMargin: number;
    timestamp: date;
}

/**
* Map principals to roles
*/
export class RoleMapping {
    id: number;
    /**
    * The principal type, such as user, application, or role
    */
    principalType: string;
    principalId: string;
    roleId: number;
}

export class Chat {
    id: number;
    date: date;
    user: string;
    message: string;
    html: string;
    fromBot: boolean;
}

export class ConnectedUsers {
    users: number;
    bots: number;
}

export class Announcement {
    id: number;
    link: string;
    title: string;
    content: string;
    date: date;
}

export class ApiKey {
    id: string;
    secret: string;
    name: string;
    nonce: number;
    cidr: string;
    permissions: Array<string>;
    enabled: boolean;
    userId: number;
    created: date;
}

export class Execution {
    execID: string;
    orderID: string;
    clOrdID: string;
    account: number;
    symbol: string;
    side: string;
    lastQty: number;
    lastPx: number;
    underlyingLastPx: number;
    lastMkt: string;
    lastLiquidityInd: string;
    simpleOrderQty: number;
    orderQty: number;
    price: number;
    minQty: number;
    stopPx: number;
    currency: string;
    settlCurrency: string;
    execType: string;
    ordType: string;
    timeInForce: string;
    exDestination: string;
    ordStatus: string;
    workingIndicator: boolean;
    ordRejReason: string;
    simpleLeavesQty: number;
    leavesQty: number;
    simpleCumQty: number;
    cumQty: number;
    avgPx: number;
    commission: number;
    commType: string;
    tradePublishIndicator: string;
    multiLegReportingType: string;
    text: string;
    trdMatchID: string;
    execCost: number;
    execComm: number;
    homeNotional: number;
    foreignNotional: number;
    transactTime: date;
    timestamp: date;
}

export class Instrument {
    symbol: string;
    rootSymbol: string;
    state: string;
    typ: string;
    listing: date;
    front: date;
    expiry: date;
    relistInterval: date;
    inverseLeg: string;
    sellLeg: string;
    buyLeg: string;
    underlying: string;
    quoteCurrency: string;
    underlyingSymbol: string;
    reference: string;
    referenceSymbol: string;
    tickSize: number;
    multiplier: number;
    settlCurrency: string;
    underlyingToSettleMultiplier: number;
    quoteToSettleMultiplier: number;
    isQuanto: boolean;
    isInverse: boolean;
    initMargin: number;
    maintMargin: number;
    limit: number;
    capped: boolean;
    taxed: boolean;
    makerFee: number;
    takerFee: number;
    insuranceFee: number;
    hedgerMakerFee: number;
    hedgerTakerFee: number;
    hedgerInsuranceFee: number;
    openingTimestamp: date;
    closingTimestamp: date;
    sessionInterval: date;
    prevClosePrice: number;
    limitDownPrice: number;
    limitUpPrice: number;
    bankruptLimitDownPrice: number;
    bankruptLimitUpPrice: number;
    prevTotalVolume: number;
    totalVolume: number;
    volume: number;
    volume24h: number;
    prevTotalTurnover: number;
    totalTurnover: number;
    turnover: number;
    turnover24h: number;
    prevPrice24h: number;
    vwap: number;
    highPrice: number;
    lowPrice: number;
    lastPrice: number;
    lastPriceProtected: number;
    lastTickDirection: string;
    lastChangePcnt: number;
    bidPrice: number;
    midPrice: number;
    askPrice: number;
    impactBidPrice: number;
    impactMidPrice: number;
    impactAskPrice: number;
    hasLiquidity: boolean;
    openInterest: number;
    openValue: number;
    fairMethod: string;
    fairBasisRate: number;
    fairBasis: number;
    fairPrice: number;
    markMethod: string;
    markPrice: number;
    indicativeTaxRate: number;
    indicativeSettlePrice: number;
    settledPrice: number;
    timestamp: date;
}

export class InstrumentInterval {
    intervals: Array<string>;
    symbols: Array<string>;
}

export class Order {
    orderID: string;
    clOrdID: string;
    account: number;
    symbol: string;
    side: string;
    simpleOrderQty: number;
    orderQty: number;
    price: number;
    minQty: number;
    stopPx: number;
    currency: string;
    settlCurrency: string;
    ordType: string;
    timeInForce: string;
    exDestination: string;
    ordStatus: string;
    workingIndicator: boolean;
    ordRejReason: string;
    simpleLeavesQty: number;
    leavesQty: number;
    simpleCumQty: number;
    cumQty: number;
    avgPx: number;
    multiLegReportingType: string;
    text: string;
    transactTime: date;
    timestamp: date;
}

export class LiquidationOrder {
    symbol: string;
    side: string;
    qty: number;
    price: number;
}

export class OrderBook {
    symbol: string;
    level: number;
    bidSize: number;
    bidPrice: number;
    askPrice: number;
    askSize: number;
    timestamp: date;
}

export class Position {
    account: number;
    symbol: string;
    underlying: string;
    quoteCurrency: string;
    currency: string;
    commission: number;
    crossMargin: boolean;
    rebalancedPnl: number;
    prevRealisedPnl: number;
    prevUnrealisedPnl: number;
    prevClosePrice: number;
    openingTimestamp: date;
    openingQty: number;
    openingCost: number;
    openingComm: number;
    openOrderBuyQty: number;
    openOrderBuyCost: number;
    openOrderBuyPremium: number;
    openOrderSellQty: number;
    openOrderSellCost: number;
    openOrderSellPremium: number;
    execBuyQty: number;
    execBuyCost: number;
    execSellQty: number;
    execSellCost: number;
    execQty: number;
    execCost: number;
    execComm: number;
    currentTimestamp: date;
    currentQty: number;
    currentCost: number;
    currentComm: number;
    realisedCost: number;
    unrealisedCost: number;
    grossOpenCost: number;
    grossOpenPremium: number;
    grossExecCost: number;
    isOpen: boolean;
    markPrice: number;
    markValue: number;
    homeNotional: number;
    foreignNotional: number;
    posState: string;
    posCost: number;
    posCost2: number;
    posCross: number;
    posInit: number;
    posComm: number;
    posLoss: number;
    posMargin: number;
    posMaint: number;
    posAllowance: number;
    taxableMargin: number;
    initMargin: number;
    maintMargin: number;
    sessionMargin: number;
    targetExcessMargin: number;
    varMargin: number;
    realisedGrossPnl: number;
    realisedTax: number;
    realisedPnl: number;
    unrealisedGrossPnl: number;
    longBankrupt: number;
    shortBankrupt: number;
    taxBase: number;
    indicativeTaxRate: number;
    indicativeTax: number;
    unrealisedTax: number;
    unrealisedPnl: number;
    unrealisedPnlPcnt: number;
    unrealisedRoePcnt: number;
    simpleQty: number;
    simpleCost: number;
    simpleValue: number;
    simplePnl: number;
    simplePnlPcnt: number;
    avgCostPrice: number;
    avgEntryPrice: number;
    breakEvenPrice: number;
    marginCallPrice: number;
    liquidationPrice: number;
    bankruptPrice: number;
    timestamp: date;
}

export class Quote {
    timestamp: date;
    symbol: string;
    bidSize: number;
    bidPrice: number;
    askPrice: number;
    askSize: number;
    id: number;
}

export class Settlement {
    symbol: string;
    timestamp: date;
    settlementType: string;
    settledPrice: number;
    bankrupt: number;
    taxBase: number;
    taxRate: number;
}

export class Stats {
    rootSymbol: string;
    currency: string;
    volume24h: number;
    turnover24h: number;
    openInterest: number;
    openValue: number;
}

export class StatsHistory {
    date: date;
    rootSymbol: string;
    currency: string;
    volume: number;
    turnover: number;
}

export class Trade {
    timestamp: date;
    symbol: string;
    side: string;
    size: number;
    price: number;
    tickDirection: string;
    trdMatchID: string;
    grossValue: number;
    homeNotional: number;
    foreignNotional: number;
    id: number;
}

export class TradeBin {
    timestamp: date;
    symbol: string;
    open: number;
    high: number;
    low: number;
    close: number;
    trades: number;
    volume: number;
    vwap: number;
    lastSize: number;
    turnover: number;
    homeNotional: number;
    foreignNotional: number;
    id: number;
}

export class Transaction {
    transactID: string;
    account: number;
    currency: string;
    transactType: string;
    amount: number;
    fee: number;
    transactStatus: string;
    address: string;
    tx: string;
    text: string;
    transactTime: date;
    timestamp: date;
}

export class Affiliate {
    account: number;
    currency: string;
    prevPayout: number;
    prevTurnover: number;
    prevComm: number;
    prevTimestamp: date;
    execTurnover: number;
    execComm: number;
    totalReferrals: number;
    totalTurnover: number;
    totalComm: number;
    payoutPcnt: number;
    pendingPayout: number;
    timestamp: date;
}

export class User {
    id: number;
    firstname: string;
    lastname: string;
    status: string;
    username: string;
    email: string;
    phone: string;
    countryCode: number;
    created: date;
    lastUpdated: date;
    preferences: UserPreferences;
    role: string;
    tFAEnabled: string;
    affiliateID: string;
    pgpPubKey: string;
    country: string;
    disabled: boolean;
}

export class UserCommission {
    makerFee: string;
    takerFee: string;
    insuranceFee: string;
}

export class InlineResponse200 {
}


interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: request.Options): void;
}

class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: request.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header") {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

class OAuth implements Authentication {
    applyToRequest(requestOptions: request.Options): void {
        // TODO: support oauth
    }
}

class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        // Do nothing
    }
}

export class OrderApi {
    protected basePath = 'https://localhost/api/v1';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Get your orders.
     * To get open orders only, send {\&quot;open\&quot;: true} in the filter param.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.\n\nYou can also send a timeframe, e.g. &#39;XBU:monthly&#39;. Timeframes are &#39;daily&#39;, &#39;weekly&#39;, &#39;monthly&#39;, &#39;quarterly&#39;, and &#39;biquarterly&#39;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as {\&quot;key\&quot;: \&quot;value\&quot;}. You can key on individual fields, and do more advanced querying on timestamps. See &lt;a href=\&quot;http://localhost:2001/app/restAPI#timestamp-filters\&quot;&gt;http://localhost:2001/app/restAPI#timestamp-filters&lt;/a&gt; for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.\n\nNote that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public orderGetOrders (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: date, endTime?: date) : Promise<{ response: http.ClientResponse; body: Array<Order>;  }> {
        const path = this.url + this.basePath + '/order';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (symbol !== undefined) {
            queryParameters['symbol'] = symbol;
        }

        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }

        if (columns !== undefined) {
            queryParameters['columns'] = columns;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        if (start !== undefined) {
            queryParameters['start'] = start;
        }

        if (reverse !== undefined) {
            queryParameters['reverse'] = reverse;
        }

        if (startTime !== undefined) {
            queryParameters['startTime'] = startTime;
        }

        if (endTime !== undefined) {
            queryParameters['endTime'] = endTime;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Order>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Create a new order.
     * This endpoint is used for placing orders. Valid order types are &#39;Limit&#39; and &#39;StopLimit&#39;. If none is provided, BitMEX will assume a Limit Order.\n\nA note on API tools: if you want to keep track of order IDs yourself, set a unique clOrdID per order. This ID will come back as a property on the order and any related executions (including on the WebSocket), and can be used to get or cancel the order. Max length is 36 characters.\n\nTo generate a clOrdID, consider setting a prefix, and incrementing a counter or generating a UUID. Some UUIDs are longer than 36 characters, so use a url-safe base64 encoding. For example, the prefix &#39;bmex_mm_&#39; and the UUID &#39;7fbd6545-bb0c-11e4-a273-6003088a7c04&#39; creates &#39;bmex_mm_f71lRbsMEeSic2ADCIp8BA&#39;.\n\nSee the BitMEX &lt;a href=&#39;https://github.com/BitMEX/market-maker/blob/22c75a2b6db63e20212813e9afdb845db1b09b2a/bitmex.py#L152&#39;&gt;Reference Market Maker&lt;/a&gt; for an example of how to use and generate clOrdIDs.
     * @param symbol Instrument symbol.
     * @param quantity Quantity. Use positive numbers to buy, negative to sell.
     * @param price Order price.
     * @param timeInForce Time in force. Valid options: &#39;IOC&#39; (Immediate-Or-Cancel), &#39;GTC&#39; (Good-Till-Cancelled).
     * @param type Order type. Available: &#39;Limit&#39;, &#39;StopLimit&#39;
     * @param stopPrice If order type is &#39;StopLimit&#39;, this is the trigger/stop price.
     * @param clOrdID Optional Client Order ID to give this order. This ID will come back on any execution messages tied to this order.
     */
    public orderNewOrder (symbol: string, quantity: number, price: number, timeInForce?: string, type?: string, stopPrice?: number, clOrdID?: string) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const path = this.url + this.basePath + '/order';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'symbol' is set
        if (!symbol) {
            throw new Error('Missing required parameter symbol when calling orderNewOrder');
        }

        // verify required parameter 'quantity' is set
        if (!quantity) {
            throw new Error('Missing required parameter quantity when calling orderNewOrder');
        }

        // verify required parameter 'price' is set
        if (!price) {
            throw new Error('Missing required parameter price when calling orderNewOrder');
        }

        let useFormData = false;

        if (symbol !== undefined) {
            formParams['symbol'] = symbol;
        }

        if (quantity !== undefined) {
            formParams['quantity'] = quantity;
        }

        if (price !== undefined) {
            formParams['price'] = price;
        }

        if (timeInForce !== undefined) {
            formParams['timeInForce'] = timeInForce;
        }

        if (type !== undefined) {
            formParams['type'] = type;
        }

        if (stopPrice !== undefined) {
            formParams['stopPrice'] = stopPrice;
        }

        if (clOrdID !== undefined) {
            formParams['clOrdID'] = clOrdID;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: Order;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Cancel order(s). Send multiple order IDs to cancel in bulk.
     * Either an orderID or a clOrdID must be provided.
     * @param orderID Order ID(s).
     * @param clOrdID Client Order ID(s). See POST /order.
     * @param text Optional cancellation annotation. e.g. &#39;Spread Exceeded&#39;
     */
    public orderCancelOrder (orderID?: string, clOrdID?: string, text?: string) : Promise<{ response: http.ClientResponse; body: Array<Order>;  }> {
        const path = this.url + this.basePath + '/order';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        if (orderID !== undefined) {
            formParams['orderID'] = orderID;
        }

        if (clOrdID !== undefined) {
            formParams['clOrdID'] = clOrdID;
        }

        if (text !== undefined) {
            formParams['text'] = text;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Order>;  }>();

        let requestOptions: request.Options = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Cancels all of your orders.
     * 
     * @param symbol Optional symbol. If provided, only cancels orders for that symbol.
     * @param filter Optional filter for cancellation. Use to only cancel some orders, e.g. `{\&quot;side\&quot;: \&quot;Buy\&quot;}`.
     * @param text Optional cancellation annotation. e.g. &#39;Spread Exceeded&#39;
     */
    public orderCancelAll (symbol?: string, filter?: string, text?: string) : Promise<{ response: http.ClientResponse; body: inline_response_200;  }> {
        const path = this.url + this.basePath + '/order/all';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        if (symbol !== undefined) {
            formParams['symbol'] = symbol;
        }

        if (filter !== undefined) {
            formParams['filter'] = filter;
        }

        if (text !== undefined) {
            formParams['text'] = text;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: inline_response_200;  }>();

        let requestOptions: request.Options = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Automatically cancel all your orders after a specified timeout.
     * Useful as a dead-man&#39;s switch to ensure your orders are canceled in case of an outage. If called repeatedly, the existing offset will be canceled and a new one will be inserted in its place. &lt;br&gt;&lt;br&gt;Example usage: call this route at 15s intervals with an offset of 60000 (60s). If this route is not called within 60 seconds, all your orders will be automatically canceled.&lt;br&gt;&lt;br&gt;This is also available via &lt;a href=\&quot;https://www.bitmex.com/app/wsAPI#dead-man-s-switch-auto-cancel-\&quot;&gt;WebSocket&lt;/a&gt;.
     * @param timeout Timeout in ms. Set to 0 to cancel this timer.
     */
    public orderCancelAllAfter (timeout: number) : Promise<{ response: http.ClientResponse; body: inline_response_200;  }> {
        const path = this.url + this.basePath + '/order/cancelAllAfter';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'timeout' is set
        if (!timeout) {
            throw new Error('Missing required parameter timeout when calling orderCancelAllAfter');
        }

        let useFormData = false;

        if (timeout !== undefined) {
            formParams['timeout'] = timeout;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: inline_response_200;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Close a position with a market order.
     * If no price is specified, a market order will be submitted to close the entirety of your position. Be careful with market orders as you may not be filled at a favorable price.
     * @param symbol Symbol of position to close.
     * @param price Optional limit price.
     */
    public orderClosePosition (symbol: string, price?: number) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const path = this.url + this.basePath + '/order/closePosition';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'symbol' is set
        if (!symbol) {
            throw new Error('Missing required parameter symbol when calling orderClosePosition');
        }

        let useFormData = false;

        if (symbol !== undefined) {
            formParams['symbol'] = symbol;
        }

        if (price !== undefined) {
            formParams['price'] = price;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: Order;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get open liquidation orders.
     * 
     * @param filter Filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}.
     */
    public orderGetCloseOutOrders (filter?: string) : Promise<{ response: http.ClientResponse; body: Array<LiquidationOrder>;  }> {
        const path = this.url + this.basePath + '/order/liquidations';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<LiquidationOrder>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class ApiKeyApi {
    protected basePath = 'https://localhost/api/v1';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Get your API Keys.
     * 
     * @param reverse If true, will sort results newest first.
     */
    public apiKeyGetKeys (reverse?: boolean) : Promise<{ response: http.ClientResponse; body: Array<ApiKey>;  }> {
        const path = this.url + this.basePath + '/apiKey';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (reverse !== undefined) {
            queryParameters['reverse'] = reverse;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<ApiKey>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Create a new API Key.
     * API Keys can also be created via &lt;a href=\&quot;https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py\&quot;&gt;this Python script&lt;/a&gt;. See the &lt;a href=\&quot;/app/apiKeys\&quot;&gt;API Key Documentation&lt;/a&gt; for more information on capabilities.
     * @param name Key name. This name is for reference only.
     * @param cidr CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href=\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt;
     * @param permissions Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;withdraw\&quot;].
     * @param enabled Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable.
     * @param token OTP Token (YubiKey, Google Authenticator)
     */
    public apiKeyCreateKey (name?: string, cidr?: string, permissions?: string, enabled?: boolean, token?: string) : Promise<{ response: http.ClientResponse; body: ApiKey;  }> {
        const path = this.url + this.basePath + '/apiKey';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        if (name !== undefined) {
            formParams['name'] = name;
        }

        if (cidr !== undefined) {
            formParams['cidr'] = cidr;
        }

        if (permissions !== undefined) {
            formParams['permissions'] = permissions;
        }

        if (enabled !== undefined) {
            formParams['enabled'] = enabled;
        }

        if (token !== undefined) {
            formParams['token'] = token;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: ApiKey;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Remove an API Key.
     * 
     * @param apiKeyID API Key ID (public component).
     */
    public apiKeyRemove (apiKeyID: string) : Promise<{ response: http.ClientResponse; body: inline_response_200;  }> {
        const path = this.url + this.basePath + '/apiKey';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'apiKeyID' is set
        if (!apiKeyID) {
            throw new Error('Missing required parameter apiKeyID when calling apiKeyRemove');
        }

        let useFormData = false;

        if (apiKeyID !== undefined) {
            formParams['apiKeyID'] = apiKeyID;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: inline_response_200;  }>();

        let requestOptions: request.Options = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Disable an API Key.
     * 
     * @param apiKeyID API Key ID (public component).
     */
    public apiKeyDisable (apiKeyID: string) : Promise<{ response: http.ClientResponse; body: ApiKey;  }> {
        const path = this.url + this.basePath + '/apiKey/disable';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'apiKeyID' is set
        if (!apiKeyID) {
            throw new Error('Missing required parameter apiKeyID when calling apiKeyDisable');
        }

        let useFormData = false;

        if (apiKeyID !== undefined) {
            formParams['apiKeyID'] = apiKeyID;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: ApiKey;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Enable an API Key.
     * 
     * @param apiKeyID API Key ID (public component).
     */
    public apiKeyEnable (apiKeyID: string) : Promise<{ response: http.ClientResponse; body: ApiKey;  }> {
        const path = this.url + this.basePath + '/apiKey/enable';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'apiKeyID' is set
        if (!apiKeyID) {
            throw new Error('Missing required parameter apiKeyID when calling apiKeyEnable');
        }

        let useFormData = false;

        if (apiKeyID !== undefined) {
            formParams['apiKeyID'] = apiKeyID;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: ApiKey;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class UserApi {
    protected basePath = 'https://localhost/api/v1';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Get your user model.
     * 
     */
    public userGetMe () : Promise<{ response: http.ClientResponse; body: User;  }> {
        const path = this.url + this.basePath + '/user';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: User;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Update your password, name, and other attributes.
     * 
     * @param firstname 
     * @param lastname 
     * @param oldPassword 
     * @param newPassword 
     * @param newPasswordConfirm 
     * @param country Country of residence.
     * @param pgpPubKey PGP Public Key. If specified, automated emails will be sentwith this key.
     */
    public userUpdateMe (firstname?: string, lastname?: string, oldPassword?: string, newPassword?: string, newPasswordConfirm?: string, country?: string, pgpPubKey?: string) : Promise<{ response: http.ClientResponse; body: User;  }> {
        const path = this.url + this.basePath + '/user';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        if (firstname !== undefined) {
            formParams['firstname'] = firstname;
        }

        if (lastname !== undefined) {
            formParams['lastname'] = lastname;
        }

        if (oldPassword !== undefined) {
            formParams['oldPassword'] = oldPassword;
        }

        if (newPassword !== undefined) {
            formParams['newPassword'] = newPassword;
        }

        if (newPasswordConfirm !== undefined) {
            formParams['newPasswordConfirm'] = newPasswordConfirm;
        }

        if (country !== undefined) {
            formParams['country'] = country;
        }

        if (pgpPubKey !== undefined) {
            formParams['pgpPubKey'] = pgpPubKey;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: User;  }>();

        let requestOptions: request.Options = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Register a new user.
     * 
     * @param email Your email address.
     * @param password Your password.
     * @param username Desired username.
     * @param firstname First name.
     * @param lastname Last name.
     * @param acceptsTOS Set to true to indicate acceptance of the Terms of Service (https://www.bitmex.com/app/terms).
     * @param referrerID Optional Referrer ID.
     * @param country Country of residence.
     */
    public userNewUser (email: string, password: string, username: string, firstname?: string, lastname?: string, acceptsTOS?: string, referrerID?: string, country?: string) : Promise<{ response: http.ClientResponse; body: User;  }> {
        const path = this.url + this.basePath + '/user';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'email' is set
        if (!email) {
            throw new Error('Missing required parameter email when calling userNewUser');
        }

        // verify required parameter 'password' is set
        if (!password) {
            throw new Error('Missing required parameter password when calling userNewUser');
        }

        // verify required parameter 'username' is set
        if (!username) {
            throw new Error('Missing required parameter username when calling userNewUser');
        }

        let useFormData = false;

        if (email !== undefined) {
            formParams['email'] = email;
        }

        if (password !== undefined) {
            formParams['password'] = password;
        }

        if (username !== undefined) {
            formParams['username'] = username;
        }

        if (firstname !== undefined) {
            formParams['firstname'] = firstname;
        }

        if (lastname !== undefined) {
            formParams['lastname'] = lastname;
        }

        if (acceptsTOS !== undefined) {
            formParams['acceptsTOS'] = acceptsTOS;
        }

        if (referrerID !== undefined) {
            formParams['referrerID'] = referrerID;
        }

        if (country !== undefined) {
            formParams['country'] = country;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: User;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get your current affiliate/referral status.
     * 
     */
    public userGetAffiliateStatus () : Promise<{ response: http.ClientResponse; body: Array<Affiliate>;  }> {
        const path = this.url + this.basePath + '/user/affiliateStatus';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Affiliate>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Cancel a withdrawal.
     * 
     * @param token 
     */
    public userCancelWithdrawal (token: string) : Promise<{ response: http.ClientResponse; body: Transaction;  }> {
        const path = this.url + this.basePath + '/user/cancelWithdrawal';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'token' is set
        if (!token) {
            throw new Error('Missing required parameter token when calling userCancelWithdrawal');
        }

        let useFormData = false;

        if (token !== undefined) {
            formParams['token'] = token;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: Transaction;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Check if a referral code is valid.
     * If the code is valid, responds with the referral code&#39;s discount (e.g. `0.1` for 10%). Otherwise, will return a 404.
     * @param referralCode 
     */
    public userCheckReferralCode (referralCode?: string) : Promise<{ response: http.ClientResponse; body: number;  }> {
        const path = this.url + this.basePath + '/user/checkReferralCode';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (referralCode !== undefined) {
            queryParameters['referralCode'] = referralCode;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: number;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get your account&#39;s commission status.
     * 
     */
    public userGetCommission () : Promise<{ response: http.ClientResponse; body: Array<UserCommission>;  }> {
        const path = this.url + this.basePath + '/user/commission';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<UserCommission>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Confirm your email address with a token.
     * 
     * @param token 
     */
    public userConfirmEmail (token: string) : Promise<{ response: http.ClientResponse; body: AccessToken;  }> {
        const path = this.url + this.basePath + '/user/confirmEmail';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'token' is set
        if (!token) {
            throw new Error('Missing required parameter token when calling userConfirmEmail');
        }

        let useFormData = false;

        if (token !== undefined) {
            formParams['token'] = token;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: AccessToken;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
     * 
     * @param token Token from your selected TFA type.
     * @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39;
     */
    public userConfirmEnableTFA (token: string, type?: string) : Promise<{ response: http.ClientResponse; body: boolean;  }> {
        const path = this.url + this.basePath + '/user/confirmEnableTFA';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'token' is set
        if (!token) {
            throw new Error('Missing required parameter token when calling userConfirmEnableTFA');
        }

        let useFormData = false;

        if (type !== undefined) {
            formParams['type'] = type;
        }

        if (token !== undefined) {
            formParams['token'] = token;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: boolean;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Confirm a password reset.
     * 
     * @param token 
     * @param newPassword 
     */
    public userConfirmPasswordReset (token: string, newPassword: string) : Promise<{ response: http.ClientResponse; body: boolean;  }> {
        const path = this.url + this.basePath + '/user/confirmPasswordReset';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'token' is set
        if (!token) {
            throw new Error('Missing required parameter token when calling userConfirmPasswordReset');
        }

        // verify required parameter 'newPassword' is set
        if (!newPassword) {
            throw new Error('Missing required parameter newPassword when calling userConfirmPasswordReset');
        }

        let useFormData = false;

        if (token !== undefined) {
            formParams['token'] = token;
        }

        if (newPassword !== undefined) {
            formParams['newPassword'] = newPassword;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: boolean;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Confirm a withdrawal.
     * 
     * @param token 
     */
    public userConfirmWithdrawal (token: string) : Promise<{ response: http.ClientResponse; body: Transaction;  }> {
        const path = this.url + this.basePath + '/user/confirmWithdrawal';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'token' is set
        if (!token) {
            throw new Error('Missing required parameter token when calling userConfirmWithdrawal');
        }

        let useFormData = false;

        if (token !== undefined) {
            formParams['token'] = token;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: Transaction;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get a deposit address.
     * 
     * @param currency 
     */
    public userGetDepositAddress (currency?: string) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const path = this.url + this.basePath + '/user/depositAddress';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (currency !== undefined) {
            queryParameters['currency'] = currency;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: string;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Disable two-factor auth for this account.
     * 
     * @param token Token from your selected TFA type.
     * @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
     */
    public userDisableTFA (token: string, type?: string) : Promise<{ response: http.ClientResponse; body: boolean;  }> {
        const path = this.url + this.basePath + '/user/disableTFA';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'token' is set
        if (!token) {
            throw new Error('Missing required parameter token when calling userDisableTFA');
        }

        let useFormData = false;

        if (type !== undefined) {
            formParams['type'] = type;
        }

        if (token !== undefined) {
            formParams['token'] = token;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: boolean;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Log in to BitMEX.
     * 
     * @param email Your email address.
     * @param password Your password.
     * @param token OTP Token (YubiKey, Google Authenticator)
     */
    public userLogin (email: string, password: string, token?: string) : Promise<{ response: http.ClientResponse; body: AccessToken;  }> {
        const path = this.url + this.basePath + '/user/login';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'email' is set
        if (!email) {
            throw new Error('Missing required parameter email when calling userLogin');
        }

        // verify required parameter 'password' is set
        if (!password) {
            throw new Error('Missing required parameter password when calling userLogin');
        }

        let useFormData = false;

        if (email !== undefined) {
            formParams['email'] = email;
        }

        if (password !== undefined) {
            formParams['password'] = password;
        }

        if (token !== undefined) {
            formParams['token'] = token;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: AccessToken;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Log out of BitMEX.
     * 
     */
    public userLogout () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const path = this.url + this.basePath + '/user/logout';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body?: any;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Log all systems out of BitMEX. This will revoke all of your account&#39;s access tokens, logging you out on all devices.
     * 
     */
    public userLogoutAll () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const path = this.url + this.basePath + '/user/logoutAll';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body?: any;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get your account&#39;s margin status.
     * 
     */
    public userGetMargin () : Promise<{ response: http.ClientResponse; body: Margin;  }> {
        const path = this.url + this.basePath + '/user/margin';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Margin;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Save application preferences.
     * 
     * @param prefs 
     * @param overwrite If true, will overwrite all existing preferences.
     */
    public userSavePreferences (prefs: string, overwrite?: boolean) : Promise<{ response: http.ClientResponse; body: User;  }> {
        const path = this.url + this.basePath + '/user/preferences';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'prefs' is set
        if (!prefs) {
            throw new Error('Missing required parameter prefs when calling userSavePreferences');
        }

        let useFormData = false;

        if (prefs !== undefined) {
            formParams['prefs'] = prefs;
        }

        if (overwrite !== undefined) {
            formParams['overwrite'] = overwrite;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: User;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get Google Authenticator secret key for setting up two-factor auth. Fails if already enabled. Use /confirmEnableTFA for Yubikeys.
     * 
     * @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
     * @param token If Yubikey, send one output from the key.
     */
    public userRequestEnableTFA (type?: string, token?: string) : Promise<{ response: http.ClientResponse; body: boolean;  }> {
        const path = this.url + this.basePath + '/user/requestEnableTFA';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        if (type !== undefined) {
            formParams['type'] = type;
        }

        if (token !== undefined) {
            formParams['token'] = token;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: boolean;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Request a password reset.
     * 
     * @param email 
     */
    public userRequestPasswordReset (email: string) : Promise<{ response: http.ClientResponse; body: boolean;  }> {
        const path = this.url + this.basePath + '/user/requestPasswordReset';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'email' is set
        if (!email) {
            throw new Error('Missing required parameter email when calling userRequestPasswordReset');
        }

        let useFormData = false;

        if (email !== undefined) {
            formParams['email'] = email;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: boolean;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Request a withdrawal to an external wallet.
     * This will send a confirmation email to the email address on record, unless requested via an API Key with the \&quot;withdraw\&quot; permission.
     * @param currency Currency you&#39;re withdrawing. Options: \&quot;XBt\&quot;
     * @param amount Amount of withdrawal currency.
     * @param address Destination Address.
     * @param otpToken 2FA token. Required if 2FA is enabled on your account.
     * @param fee Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email.
     */
    public userRequestWithdrawal (currency: string, amount: number, address: string, otpToken?: string, fee?: number) : Promise<{ response: http.ClientResponse; body: Transaction;  }> {
        const path = this.url + this.basePath + '/user/requestWithdrawal';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'currency' is set
        if (!currency) {
            throw new Error('Missing required parameter currency when calling userRequestWithdrawal');
        }

        // verify required parameter 'amount' is set
        if (!amount) {
            throw new Error('Missing required parameter amount when calling userRequestWithdrawal');
        }

        // verify required parameter 'address' is set
        if (!address) {
            throw new Error('Missing required parameter address when calling userRequestWithdrawal');
        }

        let useFormData = false;

        if (otpToken !== undefined) {
            formParams['otpToken'] = otpToken;
        }

        if (currency !== undefined) {
            formParams['currency'] = currency;
        }

        if (amount !== undefined) {
            formParams['amount'] = amount;
        }

        if (address !== undefined) {
            formParams['address'] = address;
        }

        if (fee !== undefined) {
            formParams['fee'] = fee;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: Transaction;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Re-send verification email.
     * 
     * @param email 
     */
    public userSendVerificationEmail (email: string) : Promise<{ response: http.ClientResponse; body: boolean;  }> {
        const path = this.url + this.basePath + '/user/resendVerificationEmail';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'email' is set
        if (!email) {
            throw new Error('Missing required parameter email when calling userSendVerificationEmail');
        }

        if (email !== undefined) {
            queryParameters['email'] = email;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: boolean;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get a history of all of your wallet transactions (deposits and withdrawals).
     * 
     */
    public userGetWalletHistory () : Promise<{ response: http.ClientResponse; body: Array<Transaction>;  }> {
        const path = this.url + this.basePath + '/user/walletHistory';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Transaction>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class AnnouncementApi {
    protected basePath = 'https://localhost/api/v1';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Get site announcements.
     * 
     * @param columns Array of column names to fetch. If omitted, will return all columns.
     */
    public announcementGet (columns?: string) : Promise<{ response: http.ClientResponse; body: Array<Announcement>;  }> {
        const path = this.url + this.basePath + '/announcement';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (columns !== undefined) {
            queryParameters['columns'] = columns;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Announcement>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get urgent (banner) announcements.
     * 
     */
    public announcementGetUrgent () : Promise<{ response: http.ClientResponse; body: Array<Announcement>;  }> {
        const path = this.url + this.basePath + '/announcement/urgent';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Announcement>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class OrderBookApi {
    protected basePath = 'https://localhost/api/v1';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Get current orderbook.
     * 
     * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
     * @param depth Orderbook depth.
     */
    public orderBookGetOrderBook (symbol: string, depth?: number) : Promise<{ response: http.ClientResponse; body: Array<OrderBook>;  }> {
        const path = this.url + this.basePath + '/orderBook';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'symbol' is set
        if (!symbol) {
            throw new Error('Missing required parameter symbol when calling orderBookGetOrderBook');
        }

        if (symbol !== undefined) {
            queryParameters['symbol'] = symbol;
        }

        if (depth !== undefined) {
            queryParameters['depth'] = depth;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<OrderBook>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class PositionApi {
    protected basePath = 'https://localhost/api/v1';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Get your positions.
     * 
     * @param filter Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}.
     * @param columns Which columns to fetch. For example, send [\&quot;columnName\&quot;].
     * @param count Number of rows to fetch.
     */
    public positionFind (filter?: string, columns?: string, count?: number) : Promise<{ response: http.ClientResponse; body: Array<Position>;  }> {
        const path = this.url + this.basePath + '/position';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }

        if (columns !== undefined) {
            queryParameters['columns'] = columns;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Position>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Toggle isolated (fixed) margin per-position.
     * On Speculative (DPE-Enabled) contracts, users can switch isolate margin per-position. This function allows switching margin isolation (aka fixed margin) on and off. A position must be open to isolate it.
     * @param symbol Position symbol to isolate.
     * @param enabled If true, will enable isolated margin.
     */
    public positionIsolateMargin (symbol: string, enabled?: boolean) : Promise<{ response: http.ClientResponse; body: Position;  }> {
        const path = this.url + this.basePath + '/position/isolate';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'symbol' is set
        if (!symbol) {
            throw new Error('Missing required parameter symbol when calling positionIsolateMargin');
        }

        let useFormData = false;

        if (symbol !== undefined) {
            formParams['symbol'] = symbol;
        }

        if (enabled !== undefined) {
            formParams['enabled'] = enabled;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: Position;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Transfer equity in or out of a position.
     * When margin is isolated on a position, use this function to add or remove margin from the position. Note that you cannot remove margin below the initial margin threshold.
     * @param symbol Position symbol to isolate.
     * @param amount Amount to transfer, in satoshis. May be negative.
     */
    public positionTransferIsolatedMargin (symbol: string, amount: number) : Promise<{ response: http.ClientResponse; body: Position;  }> {
        const path = this.url + this.basePath + '/position/transferMargin';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'symbol' is set
        if (!symbol) {
            throw new Error('Missing required parameter symbol when calling positionTransferIsolatedMargin');
        }

        // verify required parameter 'amount' is set
        if (!amount) {
            throw new Error('Missing required parameter amount when calling positionTransferIsolatedMargin');
        }

        let useFormData = false;

        if (symbol !== undefined) {
            formParams['symbol'] = symbol;
        }

        if (amount !== undefined) {
            formParams['amount'] = amount;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: Position;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class SchemaApi {
    protected basePath = 'https://localhost/api/v1';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Get model schemata for data objects returned by this API.
     * 
     * @param model Optional model filter. If omitted, will return all models.
     */
    public schemaFind (model?: string) : Promise<{ response: http.ClientResponse; body: inline_response_200;  }> {
        const path = this.url + this.basePath + '/schema';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (model !== undefined) {
            queryParameters['model'] = model;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: inline_response_200;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Returns help text &amp; subject list for websocket usage.
     * 
     */
    public schemaWebsocketHelp () : Promise<{ response: http.ClientResponse; body: inline_response_200;  }> {
        const path = this.url + this.basePath + '/schema/websocketHelp';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: inline_response_200;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class QuoteApi {
    protected basePath = 'https://localhost/api/v1';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Get Quotes.
     * 
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.\n\nYou can also send a timeframe, e.g. &#39;XBU:monthly&#39;. Timeframes are &#39;daily&#39;, &#39;weekly&#39;, &#39;monthly&#39;, &#39;quarterly&#39;, and &#39;biquarterly&#39;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as {\&quot;key\&quot;: \&quot;value\&quot;}. You can key on individual fields, and do more advanced querying on timestamps. See &lt;a href=\&quot;http://localhost:2001/app/restAPI#timestamp-filters\&quot;&gt;http://localhost:2001/app/restAPI#timestamp-filters&lt;/a&gt; for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.\n\nNote that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public quoteGet (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: date, endTime?: date) : Promise<{ response: http.ClientResponse; body: Array<Quote>;  }> {
        const path = this.url + this.basePath + '/quote';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (symbol !== undefined) {
            queryParameters['symbol'] = symbol;
        }

        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }

        if (columns !== undefined) {
            queryParameters['columns'] = columns;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        if (start !== undefined) {
            queryParameters['start'] = start;
        }

        if (reverse !== undefined) {
            queryParameters['reverse'] = reverse;
        }

        if (startTime !== undefined) {
            queryParameters['startTime'] = startTime;
        }

        if (endTime !== undefined) {
            queryParameters['endTime'] = endTime;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Quote>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get previous quotes in time buckets.
     * 
     * @param binSize Time interval to bucket by. Available options: [&#39;1m&#39;, &#39;5m&#39;, &#39;1h&#39;, &#39;1d&#39;].
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.\n\nYou can also send a timeframe, e.g. &#39;XBU:monthly&#39;. Timeframes are &#39;daily&#39;, &#39;weekly&#39;, &#39;monthly&#39;, &#39;quarterly&#39;, and &#39;biquarterly&#39;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as {\&quot;key\&quot;: \&quot;value\&quot;}. You can key on individual fields, and do more advanced querying on timestamps. See &lt;a href=\&quot;http://localhost:2001/app/restAPI#timestamp-filters\&quot;&gt;http://localhost:2001/app/restAPI#timestamp-filters&lt;/a&gt; for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.\n\nNote that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public quoteGetBucketed (binSize?: string, symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: date, endTime?: date) : Promise<{ response: http.ClientResponse; body: Array<Quote>;  }> {
        const path = this.url + this.basePath + '/quote/bucketed';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (binSize !== undefined) {
            queryParameters['binSize'] = binSize;
        }

        if (symbol !== undefined) {
            queryParameters['symbol'] = symbol;
        }

        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }

        if (columns !== undefined) {
            queryParameters['columns'] = columns;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        if (start !== undefined) {
            queryParameters['start'] = start;
        }

        if (reverse !== undefined) {
            queryParameters['reverse'] = reverse;
        }

        if (startTime !== undefined) {
            queryParameters['startTime'] = startTime;
        }

        if (endTime !== undefined) {
            queryParameters['endTime'] = endTime;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Quote>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class SettlementApi {
    protected basePath = 'https://localhost/api/v1';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Get settlement history.
     * 
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.\n\nYou can also send a timeframe, e.g. &#39;XBU:monthly&#39;. Timeframes are &#39;daily&#39;, &#39;weekly&#39;, &#39;monthly&#39;, &#39;quarterly&#39;, and &#39;biquarterly&#39;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as {\&quot;key\&quot;: \&quot;value\&quot;}. You can key on individual fields, and do more advanced querying on timestamps. See &lt;a href=\&quot;http://localhost:2001/app/restAPI#timestamp-filters\&quot;&gt;http://localhost:2001/app/restAPI#timestamp-filters&lt;/a&gt; for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.\n\nNote that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public settlementGet (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: date, endTime?: date) : Promise<{ response: http.ClientResponse; body: Array<Settlement>;  }> {
        const path = this.url + this.basePath + '/settlement';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (symbol !== undefined) {
            queryParameters['symbol'] = symbol;
        }

        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }

        if (columns !== undefined) {
            queryParameters['columns'] = columns;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        if (start !== undefined) {
            queryParameters['start'] = start;
        }

        if (reverse !== undefined) {
            queryParameters['reverse'] = reverse;
        }

        if (startTime !== undefined) {
            queryParameters['startTime'] = startTime;
        }

        if (endTime !== undefined) {
            queryParameters['endTime'] = endTime;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Settlement>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class TradeApi {
    protected basePath = 'https://localhost/api/v1';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Get Trades.
     * 
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.\n\nYou can also send a timeframe, e.g. &#39;XBU:monthly&#39;. Timeframes are &#39;daily&#39;, &#39;weekly&#39;, &#39;monthly&#39;, &#39;quarterly&#39;, and &#39;biquarterly&#39;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as {\&quot;key\&quot;: \&quot;value\&quot;}. You can key on individual fields, and do more advanced querying on timestamps. See &lt;a href=\&quot;http://localhost:2001/app/restAPI#timestamp-filters\&quot;&gt;http://localhost:2001/app/restAPI#timestamp-filters&lt;/a&gt; for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.\n\nNote that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public tradeGet (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: date, endTime?: date) : Promise<{ response: http.ClientResponse; body: Array<Trade>;  }> {
        const path = this.url + this.basePath + '/trade';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (symbol !== undefined) {
            queryParameters['symbol'] = symbol;
        }

        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }

        if (columns !== undefined) {
            queryParameters['columns'] = columns;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        if (start !== undefined) {
            queryParameters['start'] = start;
        }

        if (reverse !== undefined) {
            queryParameters['reverse'] = reverse;
        }

        if (startTime !== undefined) {
            queryParameters['startTime'] = startTime;
        }

        if (endTime !== undefined) {
            queryParameters['endTime'] = endTime;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Trade>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get previous trades in time buckets.
     * 
     * @param binSize Time interval to bucket by. Available options: [&#39;1m&#39;, &#39;5m&#39;, &#39;1h&#39;, &#39;1d&#39;].
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.\n\nYou can also send a timeframe, e.g. &#39;XBU:monthly&#39;. Timeframes are &#39;daily&#39;, &#39;weekly&#39;, &#39;monthly&#39;, &#39;quarterly&#39;, and &#39;biquarterly&#39;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as {\&quot;key\&quot;: \&quot;value\&quot;}. You can key on individual fields, and do more advanced querying on timestamps. See &lt;a href=\&quot;http://localhost:2001/app/restAPI#timestamp-filters\&quot;&gt;http://localhost:2001/app/restAPI#timestamp-filters&lt;/a&gt; for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.\n\nNote that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public tradeGetBucketed (binSize?: string, symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: date, endTime?: date) : Promise<{ response: http.ClientResponse; body: Array<TradeBin>;  }> {
        const path = this.url + this.basePath + '/trade/bucketed';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (binSize !== undefined) {
            queryParameters['binSize'] = binSize;
        }

        if (symbol !== undefined) {
            queryParameters['symbol'] = symbol;
        }

        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }

        if (columns !== undefined) {
            queryParameters['columns'] = columns;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        if (start !== undefined) {
            queryParameters['start'] = start;
        }

        if (reverse !== undefined) {
            queryParameters['reverse'] = reverse;
        }

        if (startTime !== undefined) {
            queryParameters['startTime'] = startTime;
        }

        if (endTime !== undefined) {
            queryParameters['endTime'] = endTime;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<TradeBin>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get trades between two dates. [Deprecated, use GET /trades]
     * 
     * @param startTime Start date.
     * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
     * @param endTime End Date.
     */
    public tradeGetByDate (startTime: date, symbol?: string, endTime?: date) : Promise<{ response: http.ClientResponse; body: Array<Trade>;  }> {
        const path = this.url + this.basePath + '/trade/byDate';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'startTime' is set
        if (!startTime) {
            throw new Error('Missing required parameter startTime when calling tradeGetByDate');
        }

        if (symbol !== undefined) {
            queryParameters['symbol'] = symbol;
        }

        if (startTime !== undefined) {
            queryParameters['startTime'] = startTime;
        }

        if (endTime !== undefined) {
            queryParameters['endTime'] = endTime;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Trade>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get recent trades. [Deprecated, use GET /trades]
     * 
     * @param count Number of trades to fetch.
     * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
     */
    public tradeGetRecent (count: number, symbol?: string) : Promise<{ response: http.ClientResponse; body: Array<Trade>;  }> {
        const path = this.url + this.basePath + '/trade/recent';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'count' is set
        if (!count) {
            throw new Error('Missing required parameter count when calling tradeGetRecent');
        }

        if (symbol !== undefined) {
            queryParameters['symbol'] = symbol;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Trade>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class ExecutionApi {
    protected basePath = 'https://localhost/api/v1';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Get all raw executions for your account.
     * This returns all raw transactions, which includes order opening and cancelation, and order status changes. It can be quite noisy. More focused information is available at /execution/tradeHistory. You may also use the `filter` param to target your query. Specify an array as a filter value, such as {\&quot;execType\&quot;: [\&quot;Settlement\&quot;, \&quot;Trade\&quot;]} to filter on multiple values.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.\n\nYou can also send a timeframe, e.g. &#39;XBU:monthly&#39;. Timeframes are &#39;daily&#39;, &#39;weekly&#39;, &#39;monthly&#39;, &#39;quarterly&#39;, and &#39;biquarterly&#39;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as {\&quot;key\&quot;: \&quot;value\&quot;}. You can key on individual fields, and do more advanced querying on timestamps. See &lt;a href=\&quot;http://localhost:2001/app/restAPI#timestamp-filters\&quot;&gt;http://localhost:2001/app/restAPI#timestamp-filters&lt;/a&gt; for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.\n\nNote that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public executionGet (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: date, endTime?: date) : Promise<{ response: http.ClientResponse; body: Array<Execution>;  }> {
        const path = this.url + this.basePath + '/execution';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (symbol !== undefined) {
            queryParameters['symbol'] = symbol;
        }

        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }

        if (columns !== undefined) {
            queryParameters['columns'] = columns;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        if (start !== undefined) {
            queryParameters['start'] = start;
        }

        if (reverse !== undefined) {
            queryParameters['reverse'] = reverse;
        }

        if (startTime !== undefined) {
            queryParameters['startTime'] = startTime;
        }

        if (endTime !== undefined) {
            queryParameters['endTime'] = endTime;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Execution>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get all balance-affecting executions. This includes each trade, insurance charge, and settlement.
     * 
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.\n\nYou can also send a timeframe, e.g. &#39;XBU:monthly&#39;. Timeframes are &#39;daily&#39;, &#39;weekly&#39;, &#39;monthly&#39;, &#39;quarterly&#39;, and &#39;biquarterly&#39;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as {\&quot;key\&quot;: \&quot;value\&quot;}. You can key on individual fields, and do more advanced querying on timestamps. See &lt;a href=\&quot;http://localhost:2001/app/restAPI#timestamp-filters\&quot;&gt;http://localhost:2001/app/restAPI#timestamp-filters&lt;/a&gt; for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.\n\nNote that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public executionGetTradeHistory (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: date, endTime?: date) : Promise<{ response: http.ClientResponse; body: Array<Execution>;  }> {
        const path = this.url + this.basePath + '/execution/tradeHistory';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (symbol !== undefined) {
            queryParameters['symbol'] = symbol;
        }

        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }

        if (columns !== undefined) {
            queryParameters['columns'] = columns;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        if (start !== undefined) {
            queryParameters['start'] = start;
        }

        if (reverse !== undefined) {
            queryParameters['reverse'] = reverse;
        }

        if (startTime !== undefined) {
            queryParameters['startTime'] = startTime;
        }

        if (endTime !== undefined) {
            queryParameters['endTime'] = endTime;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Execution>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class ChatApi {
    protected basePath = 'https://localhost/api/v1';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Get chat messages.
     * 
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     */
    public chatGet (count?: number, start?: number, reverse?: boolean) : Promise<{ response: http.ClientResponse; body: Array<Chat>;  }> {
        const path = this.url + this.basePath + '/chat';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        if (start !== undefined) {
            queryParameters['start'] = start;
        }

        if (reverse !== undefined) {
            queryParameters['reverse'] = reverse;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Chat>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Send a chat message.
     * 
     * @param message 
     */
    public chatSend (message: string) : Promise<{ response: http.ClientResponse; body: Chat;  }> {
        const path = this.url + this.basePath + '/chat';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'message' is set
        if (!message) {
            throw new Error('Missing required parameter message when calling chatSend');
        }

        let useFormData = false;

        if (message !== undefined) {
            formParams['message'] = message;
        }

        let deferred = promise.defer<{ response: http.ClientResponse; body: Chat;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get connected users.
     * Returns an array with browser users in the first position and API users (bots) in the second position.
     */
    public chatGetConnected () : Promise<{ response: http.ClientResponse; body: ConnectedUsers;  }> {
        const path = this.url + this.basePath + '/chat/connected';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: ConnectedUsers;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class InstrumentApi {
    protected basePath = 'https://localhost/api/v1';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Get instruments.
     * This returns all instruments and indices, including those that have settled or are unlisted. Use this endpoint if you want to query for individual instruments or use a complex filter. Use the endpoint /instrument/active to return active instruments, or use a filter like {\&quot;state\&quot;: \&quot;Open\&quot;}.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.\n\nYou can also send a timeframe, e.g. &#39;XBU:monthly&#39;. Timeframes are &#39;daily&#39;, &#39;weekly&#39;, &#39;monthly&#39;, &#39;quarterly&#39;, and &#39;biquarterly&#39;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as {\&quot;key\&quot;: \&quot;value\&quot;}. You can key on individual fields, and do more advanced querying on timestamps. See &lt;a href=\&quot;http://localhost:2001/app/restAPI#timestamp-filters\&quot;&gt;http://localhost:2001/app/restAPI#timestamp-filters&lt;/a&gt; for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.\n\nNote that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public instrumentGet (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: date, endTime?: date) : Promise<{ response: http.ClientResponse; body: Array<Instrument>;  }> {
        const path = this.url + this.basePath + '/instrument';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (symbol !== undefined) {
            queryParameters['symbol'] = symbol;
        }

        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }

        if (columns !== undefined) {
            queryParameters['columns'] = columns;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        if (start !== undefined) {
            queryParameters['start'] = start;
        }

        if (reverse !== undefined) {
            queryParameters['reverse'] = reverse;
        }

        if (startTime !== undefined) {
            queryParameters['startTime'] = startTime;
        }

        if (endTime !== undefined) {
            queryParameters['endTime'] = endTime;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Instrument>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get all active instruments and instruments that have expired in &lt;24hrs.
     * 
     */
    public instrumentGetActive () : Promise<{ response: http.ClientResponse; body: Array<Instrument>;  }> {
        const path = this.url + this.basePath + '/instrument/active';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Instrument>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Helper method. Gets all active instruments and all indices. This is a join of the result of /indices and /active.
     * 
     */
    public instrumentGetActiveAndIndices () : Promise<{ response: http.ClientResponse; body: Array<Instrument>;  }> {
        const path = this.url + this.basePath + '/instrument/activeAndIndices';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Instrument>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Return all active contract series and interval pairs.
     * This endpoint is useful for determining which pairs are live. It returns two arrays of   strings. The first is intervals, such as `[\&quot;BVOL:daily\&quot;, \&quot;BVOL:weekly\&quot;, \&quot;XBU:daily\&quot;, \&quot;XBU:monthly\&quot;, ...]`. These identifiers are usable in any query&#39;s \&quot;symbol\&quot; param. The second array is the current resolution of these intervals. Results are mapped at the same index.
     */
    public instrumentGetActiveIntervals () : Promise<{ response: http.ClientResponse; body: InstrumentInterval;  }> {
        const path = this.url + this.basePath + '/instrument/activeIntervals';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: InstrumentInterval;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get all price indices.
     * 
     */
    public instrumentGetIndices () : Promise<{ response: http.ClientResponse; body: Array<Instrument>;  }> {
        const path = this.url + this.basePath + '/instrument/indices';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Instrument>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class StatsApi {
    protected basePath = 'https://localhost/api/v1';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Get exchange-wide and per-series turnover and volume statistics.
     * 
     */
    public statsFind () : Promise<{ response: http.ClientResponse; body: Array<Stats>;  }> {
        const path = this.url + this.basePath + '/stats';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<Stats>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     * Get historical exchange-wide and per-series turnover and volume statistics.
     * 
     */
    public statsHistory () : Promise<{ response: http.ClientResponse; body: Array<StatsHistory>;  }> {
        const path = this.url + this.basePath + '/stats/history';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<StatsHistory>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}